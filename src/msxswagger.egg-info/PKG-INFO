Metadata-Version: 2.1
Name: msxswagger
Version: 0.7.0
Summary: A package that enables swagger ui in your python web application
Home-page: UNKNOWN
Author: Cisco MSX
Author-email: ananasta@cisco.com
License: UNKNOWN
Description: # msxswagger
        * [Introduction](#introduction)
        * [Prerequisites](#prerequisites)
        * [Getting Started](#getting-started)
            * [Swagger Annotations](#swagger-annotations)
            * [OpenAPI Specifications](#openapi-specifications)
            * [Adding Security](#adding-security)
        * [Configuration Options](#configuration-options)
            * [Documentation Config](#documentation-config)
            * [Security](#security)
        
        
        ## Introduction
        This module adds Swagger UI to Flask applications, based on annotated routes or an OpenAPI specification document.
        
        
        ## Prerequisites
        - python3
        - pip3
        - Flask
        
        
        ## Installation
        ```bash
        $ pip3 install git+https://github.com/CiscoDevNet/python-msx-swagger
        ```
        
        
        ### Swagger Annotations
        A small Flask application that populates the Swagger from annotations looks like this:
        ```python
        from flask import Flask
        from flask_restx import Resource
        from msxswagger import MSXSwaggerConfig, DocumentationConfig
        
        
        class ExampleApi(Resource):
        	def get(self):
        		return {"Hello": "World"}
        
        
        app = Flask(__name__)
        documentation_config = DocumentationConfig(root_path='/helloworld',)
        swagger = MSXSwaggerConfig(app, documentation_config)
        swagger.api.add_resource(ExampleApi, "/api/example")
        app.register_blueprint(swagger.api.blueprint)
        
        if __name__ == '__main__':
        	app.run()
        
        ```
        Start the application and open `http://localhost:5000/helloworld/swagger` in a browser.
        
        ![](images/swagger_annotations.png)
        
        <br>
        
        ### OpenAPI Specifications
        To display the OpenAPI specification from a JSON file, pass the resource name in when you create `MSXSwaggerConfig`.
        ```python
        from flask import Flask
        from msxswagger import MSXSwaggerConfig, DocumentationConfig
        from controllers.items_controller import ItemsApi, ItemApi
        from controllers.languages_controller import LanguageApi, LanguagesApi
        
        app = Flask(__name__)
        documentation_config = DocumentationConfig(root_path='/helloworld')
        swagger = MSXSwaggerConfig(app, documentation_config, swagger_resource="swagger.json")
        
        swagger.api.add_resource(ItemsApi, "/api/v1/items")
        swagger.api.add_resource(ItemApi, "/api/v1/items/<id>")
        swagger.api.add_resource(LanguagesApi, "/api/v1/languages")
        swagger.api.add_resource(LanguageApi, "/api/v1/languages/<id>")
        app.register_blueprint(swagger.api.blueprint)
        
        if __name__ == '__main__':
        	app.run()
        ```
        
        You will have to write boilerplate implementations of the controller classes before this application will run. Once you have, start the application and open `http://localhost:5000/helloworld/swagger` in a browser.
        
        ![](images/openapi_specification.png)
        
        <br>
        
        ### Adding Security
        If you need your API requests to include an MSX access token in the header, add the additional configuration shown. You can only test this application by deploying it into an MSX environment.
        ```python
        from flask import Flask
        from flask_restx import Resource
        from msxswagger import MSXSwaggerConfig, DocumentationConfig, Sso, Security
        
        
        class ExampleApi(Resource):
        	def get(self):
        		return {'Hello': 'World'}, 200
        
        
        app = Flask(__name__)
        
        sso = Sso(
        	base_url='https://MY_MSX_ENVIRONMENT/idm',
        	client_id='local-public-client2')
        
        documentation_config = DocumentationConfig(
        	root_path='/helloworld',
        	security=Security(True, sso))
        
        swagger = MSXSwaggerConfig(app, documentation_config)
        swagger.api.add_resource(ExampleApi, "/api/example")
        app.register_blueprint(swagger.api.blueprint)
        
        
        if __name__ == '__main__':
        	app.run()
        ```
        
        
        ## Configuration Options
        The class `MSXSwaggerConfig` takes three parameters:`
        * a Flask application reference
        * a Swagger Documentation Config instance
        * an optional OpenAPI specification resource (e.g. swagger.json)
        
        
        ### Documentation Config
        There are default values for most properties in this object, and often you will only have to set `root_path`.
        
        | Name           | Default            | Description |
        |----------------|--------------------|-------------|
        | root_path      |                    | The root path that other routes will be appended to. |
        | ui_path        | /swagger           | The path the Swagger UI will be served from. |
        | resource_path  | /swagger-resources | An internal value used to configure Swagger resources. |
        | api_path       | /apidocs.json      | An internal value used to configure Swagger resources. |
        | spec_version   | 3.0.0              | The Swagger version to render. |
        | security       | Security(False)    | SSO settings for integrating with MSX. |
        
        
        ### Security
        Again there sensible default for some properties. In some cases you will just need to disable security, but if you enable in most cases you will only need to set `sso.base_url` and `sso.client_id`.
        
        | Name               | Default                   | Description |
        |--------------------|---------------------------|-------------|
        | enabled            | False                     | Disable or enable MSX SSO integration. |
        | sso.base_url       | http://localhost:9103/idm | Your application should look the Consul key `thirdpartyservices/defaultapplication/swagger.security.sso.baseUrl`. |
        | sso.token_path     | /v2/token                 | An internal value used to configure SSO. |
        | sso.authorize_path | /v2/authorize"            | An internal value used to configure SSO. |
        | sso.client_id      |                           | The public security client you created for your application. Your application should look up the Consul key `thirdpartyservices/helloworldservice/public.security.clientId`. |
        | sso.client_secret  |                           | Leave this blank. |
        
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.0
Description-Content-Type: text/markdown
